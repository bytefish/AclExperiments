//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/philipp/source/repos/bytefish/AclExperiments//src/AclExperiments/Parser/UsersetRewrite.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AclExperiments.Parser.Generated {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UsersetRewriteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, UNION=16, INTERSECT=17, 
		EXCLUDE=18, TUPLE_USERSET_NAMESPACE=19, TUPLE_USERSET_OBJECT=20, TUPLE_USERSET_RELATION=21, 
		STRING=22, SINGLE_LINE_COMMENT=23, MULTI_LINE_COMMENT=24, IDENTIFIER=25, 
		WS=26;
	public const int
		RULE_namespace = 0, RULE_relation = 1, RULE_metadata = 2, RULE_metadataRelation = 3, 
		RULE_directlyRelatedType = 4, RULE_directlyRelatedTypeNamespaceRef = 5, 
		RULE_directlyRelatedTypeRelationRef = 6, RULE_usersetRewrite = 7, RULE_userset = 8, 
		RULE_childUserset = 9, RULE_computedUserset = 10, RULE_usersetNamespaceRef = 11, 
		RULE_usersetObjectRef = 12, RULE_usersetRelationRef = 13, RULE_thisUserset = 14, 
		RULE_tupleToUserset = 15, RULE_tupleset = 16, RULE_namespaceRef = 17, 
		RULE_objectRef = 18, RULE_relationRef = 19, RULE_setOperationUserset = 20;
	public static readonly string[] ruleNames = {
		"namespace", "relation", "metadata", "metadataRelation", "directlyRelatedType", 
		"directlyRelatedTypeNamespaceRef", "directlyRelatedTypeRelationRef", "usersetRewrite", 
		"userset", "childUserset", "computedUserset", "usersetNamespaceRef", "usersetObjectRef", 
		"usersetRelationRef", "thisUserset", "tupleToUserset", "tupleset", "namespaceRef", 
		"objectRef", "relationRef", "setOperationUserset"
	};

	private static readonly string[] _LiteralNames = {
		null, "'name'", "':'", "'relation'", "'{'", "'}'", "'metadata'", "'directly_related_type'", 
		"'namespace'", "'userset_rewrite'", "'child'", "'computed_userset'", "'object'", 
		"'_this'", "'tuple_to_userset'", "'tupleset'", "'union'", "'intersect'", 
		"'exclude'", "'$TUPLE_USERSET_NAMESPACE'", "'$TUPLE_USERSET_OBJECT'", 
		"'$TUPLE_USERSET_RELATION'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "UNION", "INTERSECT", "EXCLUDE", "TUPLE_USERSET_NAMESPACE", 
		"TUPLE_USERSET_OBJECT", "TUPLE_USERSET_RELATION", "STRING", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UsersetRewrite.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UsersetRewriteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UsersetRewriteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UsersetRewriteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IToken namespaceName;
		[System.Diagnostics.DebuggerNonUserCode] public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UsersetRewriteParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 0, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(T__0);
			State = 43;
			Match(T__1);
			State = 44;
			_localctx.namespaceName = Match(STRING);
			State = 45;
			metadata();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 46;
				relation();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public IToken relationName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsersetRewriteContext usersetRewrite() {
			return GetRuleContext<UsersetRewriteContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 2, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__2);
			State = 55;
			Match(T__3);
			State = 56;
			Match(T__0);
			State = 57;
			Match(T__1);
			State = 58;
			_localctx.relationName = Match(STRING);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 59;
				usersetRewrite();
				}
			}

			State = 62;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetadataRelationContext[] metadataRelation() {
			return GetRuleContexts<MetadataRelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetadataRelationContext metadataRelation(int i) {
			return GetRuleContext<MetadataRelationContext>(i);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 4, RULE_metadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__5);
			State = 65;
			Match(T__3);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 66;
				metadataRelation();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataRelationContext : ParserRuleContext {
		public IToken relationName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyRelatedTypeContext[] directlyRelatedType() {
			return GetRuleContexts<DirectlyRelatedTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyRelatedTypeContext directlyRelatedType(int i) {
			return GetRuleContext<DirectlyRelatedTypeContext>(i);
		}
		public MetadataRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadataRelation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadataRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataRelationContext metadataRelation() {
		MetadataRelationContext _localctx = new MetadataRelationContext(Context, State);
		EnterRule(_localctx, 6, RULE_metadataRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__2);
			State = 75;
			Match(T__3);
			State = 76;
			Match(T__0);
			State = 77;
			Match(T__1);
			State = 78;
			_localctx.relationName = Match(STRING);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 79;
				directlyRelatedType();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectlyRelatedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyRelatedTypeNamespaceRefContext[] directlyRelatedTypeNamespaceRef() {
			return GetRuleContexts<DirectlyRelatedTypeNamespaceRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyRelatedTypeNamespaceRefContext directlyRelatedTypeNamespaceRef(int i) {
			return GetRuleContext<DirectlyRelatedTypeNamespaceRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyRelatedTypeRelationRefContext[] directlyRelatedTypeRelationRef() {
			return GetRuleContexts<DirectlyRelatedTypeRelationRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectlyRelatedTypeRelationRefContext directlyRelatedTypeRelationRef(int i) {
			return GetRuleContext<DirectlyRelatedTypeRelationRefContext>(i);
		}
		public DirectlyRelatedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directlyRelatedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectlyRelatedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectlyRelatedTypeContext directlyRelatedType() {
		DirectlyRelatedTypeContext _localctx = new DirectlyRelatedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_directlyRelatedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__6);
			State = 88;
			Match(T__3);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 91;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 89;
					directlyRelatedTypeNamespaceRef();
					}
					break;
				case T__2:
					{
					State = 90;
					directlyRelatedTypeRelationRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__2 || _la==T__7 );
			State = 95;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectlyRelatedTypeNamespaceRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public DirectlyRelatedTypeNamespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directlyRelatedTypeNamespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectlyRelatedTypeNamespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectlyRelatedTypeNamespaceRefContext directlyRelatedTypeNamespaceRef() {
		DirectlyRelatedTypeNamespaceRefContext _localctx = new DirectlyRelatedTypeNamespaceRefContext(Context, State);
		EnterRule(_localctx, 10, RULE_directlyRelatedTypeNamespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__7);
			State = 98;
			Match(T__1);
			State = 99;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectlyRelatedTypeRelationRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public DirectlyRelatedTypeRelationRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directlyRelatedTypeRelationRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectlyRelatedTypeRelationRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectlyRelatedTypeRelationRefContext directlyRelatedTypeRelationRef() {
		DirectlyRelatedTypeRelationRefContext _localctx = new DirectlyRelatedTypeRelationRefContext(Context, State);
		EnterRule(_localctx, 12, RULE_directlyRelatedTypeRelationRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__2);
			State = 102;
			Match(T__1);
			State = 103;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetRewriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset() {
			return GetRuleContext<UsersetContext>(0);
		}
		public UsersetRewriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetRewrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetRewrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetRewriteContext usersetRewrite() {
		UsersetRewriteContext _localctx = new UsersetRewriteContext(Context, State);
		EnterRule(_localctx, 14, RULE_usersetRewrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__8);
			State = 106;
			Match(T__3);
			State = 107;
			userset();
			State = 108;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChildUsersetContext childUserset() {
			return GetRuleContext<ChildUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComputedUsersetContext computedUserset() {
			return GetRuleContext<ComputedUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetOperationUsersetContext setOperationUserset() {
			return GetRuleContext<SetOperationUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThisUsersetContext thisUserset() {
			return GetRuleContext<ThisUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleToUsersetContext tupleToUserset() {
			return GetRuleContext<TupleToUsersetContext>(0);
		}
		public UsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetContext userset() {
		UsersetContext _localctx = new UsersetContext(Context, State);
		EnterRule(_localctx, 16, RULE_userset);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				childUserset();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				computedUserset();
				}
				break;
			case UNION:
			case INTERSECT:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				setOperationUserset();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				thisUserset();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114;
				tupleToUserset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildUsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset() {
			return GetRuleContext<UsersetContext>(0);
		}
		public ChildUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_childUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChildUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChildUsersetContext childUserset() {
		ChildUsersetContext _localctx = new ChildUsersetContext(Context, State);
		EnterRule(_localctx, 18, RULE_childUserset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__9);
			State = 118;
			Match(T__3);
			State = 119;
			userset();
			State = 120;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputedUsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsersetNamespaceRefContext[] usersetNamespaceRef() {
			return GetRuleContexts<UsersetNamespaceRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetNamespaceRefContext usersetNamespaceRef(int i) {
			return GetRuleContext<UsersetNamespaceRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetObjectRefContext[] usersetObjectRef() {
			return GetRuleContexts<UsersetObjectRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetObjectRefContext usersetObjectRef(int i) {
			return GetRuleContext<UsersetObjectRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetRelationRefContext[] usersetRelationRef() {
			return GetRuleContexts<UsersetRelationRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetRelationRefContext usersetRelationRef(int i) {
			return GetRuleContext<UsersetRelationRefContext>(i);
		}
		public ComputedUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computedUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputedUsersetContext computedUserset() {
		ComputedUsersetContext _localctx = new ComputedUsersetContext(Context, State);
		EnterRule(_localctx, 20, RULE_computedUserset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__10);
			State = 123;
			Match(T__3);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 127;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 124;
					usersetNamespaceRef();
					}
					break;
				case T__11:
					{
					State = 125;
					usersetObjectRef();
					}
					break;
				case T__2:
					{
					State = 126;
					usersetRelationRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4360L) != 0) );
			State = 131;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetNamespaceRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE_USERSET_NAMESPACE() { return GetToken(UsersetRewriteParser.TUPLE_USERSET_NAMESPACE, 0); }
		public UsersetNamespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetNamespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetNamespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetNamespaceRefContext usersetNamespaceRef() {
		UsersetNamespaceRefContext _localctx = new UsersetNamespaceRefContext(Context, State);
		EnterRule(_localctx, 22, RULE_usersetNamespaceRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(T__7);
			State = 134;
			Match(T__1);
			State = 135;
			_localctx.@ref = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TUPLE_USERSET_NAMESPACE || _la==STRING) ) {
				_localctx.@ref = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetObjectRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE_USERSET_OBJECT() { return GetToken(UsersetRewriteParser.TUPLE_USERSET_OBJECT, 0); }
		public UsersetObjectRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetObjectRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetObjectRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetObjectRefContext usersetObjectRef() {
		UsersetObjectRefContext _localctx = new UsersetObjectRefContext(Context, State);
		EnterRule(_localctx, 24, RULE_usersetObjectRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__11);
			State = 138;
			Match(T__1);
			State = 139;
			_localctx.@ref = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TUPLE_USERSET_OBJECT || _la==STRING) ) {
				_localctx.@ref = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetRelationRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE_USERSET_RELATION() { return GetToken(UsersetRewriteParser.TUPLE_USERSET_RELATION, 0); }
		public UsersetRelationRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetRelationRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetRelationRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetRelationRefContext usersetRelationRef() {
		UsersetRelationRefContext _localctx = new UsersetRelationRefContext(Context, State);
		EnterRule(_localctx, 26, RULE_usersetRelationRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__2);
			State = 142;
			Match(T__1);
			State = 143;
			_localctx.@ref = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TUPLE_USERSET_RELATION || _la==STRING) ) {
				_localctx.@ref = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisUsersetContext : ParserRuleContext {
		public ThisUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisUsersetContext thisUserset() {
		ThisUsersetContext _localctx = new ThisUsersetContext(Context, State);
		EnterRule(_localctx, 28, RULE_thisUserset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__12);
			State = 146;
			Match(T__3);
			State = 147;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleToUsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TuplesetContext tupleset() {
			return GetRuleContext<TuplesetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComputedUsersetContext computedUserset() {
			return GetRuleContext<ComputedUsersetContext>(0);
		}
		public TupleToUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleToUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleToUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleToUsersetContext tupleToUserset() {
		TupleToUsersetContext _localctx = new TupleToUsersetContext(Context, State);
		EnterRule(_localctx, 30, RULE_tupleToUserset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__13);
			State = 150;
			Match(T__3);
			State = 151;
			tupleset();
			State = 152;
			computedUserset();
			State = 153;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuplesetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceRefContext[] namespaceRef() {
			return GetRuleContexts<NamespaceRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceRefContext namespaceRef(int i) {
			return GetRuleContext<NamespaceRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectRefContext[] objectRef() {
			return GetRuleContexts<ObjectRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectRefContext objectRef(int i) {
			return GetRuleContext<ObjectRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRefContext[] relationRef() {
			return GetRuleContexts<RelationRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRefContext relationRef(int i) {
			return GetRuleContext<RelationRefContext>(i);
		}
		public TuplesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuplesetContext tupleset() {
		TuplesetContext _localctx = new TuplesetContext(Context, State);
		EnterRule(_localctx, 32, RULE_tupleset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(T__14);
			State = 156;
			Match(T__3);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 160;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 157;
					namespaceRef();
					}
					break;
				case T__11:
					{
					State = 158;
					objectRef();
					}
					break;
				case T__2:
					{
					State = 159;
					relationRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4360L) != 0) );
			State = 164;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public NamespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceRefContext namespaceRef() {
		NamespaceRefContext _localctx = new NamespaceRefContext(Context, State);
		EnterRule(_localctx, 34, RULE_namespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(T__7);
			State = 167;
			Match(T__1);
			State = 168;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public ObjectRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectRefContext objectRef() {
		ObjectRefContext _localctx = new ObjectRefContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__11);
			State = 171;
			Match(T__1);
			State = 172;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public RelationRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationRefContext relationRef() {
		RelationRefContext _localctx = new RelationRefContext(Context, State);
		EnterRule(_localctx, 38, RULE_relationRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__2);
			State = 175;
			Match(T__1);
			State = 176;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOperationUsersetContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(UsersetRewriteParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(UsersetRewriteParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(UsersetRewriteParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext[] userset() {
			return GetRuleContexts<UsersetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset(int i) {
			return GetRuleContext<UsersetContext>(i);
		}
		public SetOperationUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOperationUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOperationUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOperationUsersetContext setOperationUserset() {
		SetOperationUsersetContext _localctx = new SetOperationUsersetContext(Context, State);
		EnterRule(_localctx, 40, RULE_setOperationUserset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 179;
			Match(T__3);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 486400L) != 0)) {
				{
				{
				State = 180;
				userset();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,189,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,1,
		0,1,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		3,1,61,8,1,1,1,1,1,1,2,1,2,1,2,5,2,68,8,2,10,2,12,2,71,9,2,1,2,1,2,1,3,
		1,3,1,3,1,3,1,3,1,3,5,3,81,8,3,10,3,12,3,84,9,3,1,3,1,3,1,4,1,4,1,4,1,
		4,4,4,92,8,4,11,4,12,4,93,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,116,8,8,1,9,1,9,1,9,1,9,1,9,1,
		10,1,10,1,10,1,10,1,10,4,10,128,8,10,11,10,12,10,129,1,10,1,10,1,11,1,
		11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
		14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,4,16,161,8,16,
		11,16,12,16,162,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,5,20,182,8,20,10,20,12,20,185,9,20,1,20,
		1,20,1,20,0,0,21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,0,4,2,0,19,19,22,22,2,0,20,20,22,22,1,0,21,22,1,0,16,18,184,0,42,1,
		0,0,0,2,54,1,0,0,0,4,64,1,0,0,0,6,74,1,0,0,0,8,87,1,0,0,0,10,97,1,0,0,
		0,12,101,1,0,0,0,14,105,1,0,0,0,16,115,1,0,0,0,18,117,1,0,0,0,20,122,1,
		0,0,0,22,133,1,0,0,0,24,137,1,0,0,0,26,141,1,0,0,0,28,145,1,0,0,0,30,149,
		1,0,0,0,32,155,1,0,0,0,34,166,1,0,0,0,36,170,1,0,0,0,38,174,1,0,0,0,40,
		178,1,0,0,0,42,43,5,1,0,0,43,44,5,2,0,0,44,45,5,22,0,0,45,49,3,4,2,0,46,
		48,3,2,1,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,
		52,1,0,0,0,51,49,1,0,0,0,52,53,5,0,0,1,53,1,1,0,0,0,54,55,5,3,0,0,55,56,
		5,4,0,0,56,57,5,1,0,0,57,58,5,2,0,0,58,60,5,22,0,0,59,61,3,14,7,0,60,59,
		1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,5,5,0,0,63,3,1,0,0,0,64,65,5,
		6,0,0,65,69,5,4,0,0,66,68,3,6,3,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,
		0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,0,72,73,5,5,0,0,73,5,1,0,
		0,0,74,75,5,3,0,0,75,76,5,4,0,0,76,77,5,1,0,0,77,78,5,2,0,0,78,82,5,22,
		0,0,79,81,3,8,4,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,
		0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,5,5,0,0,86,7,1,0,0,0,87,88,5,7,0,
		0,88,91,5,4,0,0,89,92,3,10,5,0,90,92,3,12,6,0,91,89,1,0,0,0,91,90,1,0,
		0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,96,5,5,
		0,0,96,9,1,0,0,0,97,98,5,8,0,0,98,99,5,2,0,0,99,100,5,22,0,0,100,11,1,
		0,0,0,101,102,5,3,0,0,102,103,5,2,0,0,103,104,5,22,0,0,104,13,1,0,0,0,
		105,106,5,9,0,0,106,107,5,4,0,0,107,108,3,16,8,0,108,109,5,5,0,0,109,15,
		1,0,0,0,110,116,3,18,9,0,111,116,3,20,10,0,112,116,3,40,20,0,113,116,3,
		28,14,0,114,116,3,30,15,0,115,110,1,0,0,0,115,111,1,0,0,0,115,112,1,0,
		0,0,115,113,1,0,0,0,115,114,1,0,0,0,116,17,1,0,0,0,117,118,5,10,0,0,118,
		119,5,4,0,0,119,120,3,16,8,0,120,121,5,5,0,0,121,19,1,0,0,0,122,123,5,
		11,0,0,123,127,5,4,0,0,124,128,3,22,11,0,125,128,3,24,12,0,126,128,3,26,
		13,0,127,124,1,0,0,0,127,125,1,0,0,0,127,126,1,0,0,0,128,129,1,0,0,0,129,
		127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,5,0,0,132,21,1,0,
		0,0,133,134,5,8,0,0,134,135,5,2,0,0,135,136,7,0,0,0,136,23,1,0,0,0,137,
		138,5,12,0,0,138,139,5,2,0,0,139,140,7,1,0,0,140,25,1,0,0,0,141,142,5,
		3,0,0,142,143,5,2,0,0,143,144,7,2,0,0,144,27,1,0,0,0,145,146,5,13,0,0,
		146,147,5,4,0,0,147,148,5,5,0,0,148,29,1,0,0,0,149,150,5,14,0,0,150,151,
		5,4,0,0,151,152,3,32,16,0,152,153,3,20,10,0,153,154,5,5,0,0,154,31,1,0,
		0,0,155,156,5,15,0,0,156,160,5,4,0,0,157,161,3,34,17,0,158,161,3,36,18,
		0,159,161,3,38,19,0,160,157,1,0,0,0,160,158,1,0,0,0,160,159,1,0,0,0,161,
		162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,
		5,0,0,165,33,1,0,0,0,166,167,5,8,0,0,167,168,5,2,0,0,168,169,5,22,0,0,
		169,35,1,0,0,0,170,171,5,12,0,0,171,172,5,2,0,0,172,173,5,22,0,0,173,37,
		1,0,0,0,174,175,5,3,0,0,175,176,5,2,0,0,176,177,5,22,0,0,177,39,1,0,0,
		0,178,179,7,3,0,0,179,183,5,4,0,0,180,182,3,16,8,0,181,180,1,0,0,0,182,
		185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,1,
		0,0,0,186,187,5,5,0,0,187,41,1,0,0,0,12,49,60,69,82,91,93,115,127,129,
		160,162,183
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AclExperiments.Parser.Generated
