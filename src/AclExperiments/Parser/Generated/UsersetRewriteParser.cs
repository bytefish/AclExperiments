//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/philipp/source/repos/bytefish/AclExperiments//src/AclExperiments/Parser/UsersetRewrite.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AclExperiments.Parser.Generated {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UsersetRewriteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, UNION=14, INTERSECT=15, EXCLUDE=16, 
		TUPLE_USERSET_NAMESPACE=17, TUPLE_USERSET_OBJECT=18, TUPLE_USERSET_RELATION=19, 
		STRING=20, SINGLE_LINE_COMMENT=21, MULTI_LINE_COMMENT=22, IDENTIFIER=23, 
		WS=24;
	public const int
		RULE_namespace = 0, RULE_relation = 1, RULE_usersetRewrite = 2, RULE_userset = 3, 
		RULE_childUserset = 4, RULE_computedUserset = 5, RULE_usersetNamespaceRef = 6, 
		RULE_usersetObjectRef = 7, RULE_usersetRelationRef = 8, RULE_thisUserset = 9, 
		RULE_tupleToUserset = 10, RULE_tupleset = 11, RULE_namespaceRef = 12, 
		RULE_objectRef = 13, RULE_relationRef = 14, RULE_setOperationUserset = 15;
	public static readonly string[] ruleNames = {
		"namespace", "relation", "usersetRewrite", "userset", "childUserset", 
		"computedUserset", "usersetNamespaceRef", "usersetObjectRef", "usersetRelationRef", 
		"thisUserset", "tupleToUserset", "tupleset", "namespaceRef", "objectRef", 
		"relationRef", "setOperationUserset"
	};

	private static readonly string[] _LiteralNames = {
		null, "'name'", "':'", "'relation'", "'{'", "'}'", "'userset_rewrite'", 
		"'child'", "'computed_userset'", "'namespace'", "'object'", "'_this'", 
		"'tuple_to_userset'", "'tupleset'", "'union'", "'intersect'", "'exclude'", 
		"'$TUPLE_USERSET_NAMESPACE'", "'$TUPLE_USERSET_OBJECT'", "'$TUPLE_USERSET_RELATION'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "UNION", "INTERSECT", "EXCLUDE", "TUPLE_USERSET_NAMESPACE", 
		"TUPLE_USERSET_OBJECT", "TUPLE_USERSET_RELATION", "STRING", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UsersetRewrite.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UsersetRewriteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UsersetRewriteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UsersetRewriteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IToken namespaceName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UsersetRewriteParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 0, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(T__0);
			State = 33;
			Match(T__1);
			State = 34;
			_localctx.namespaceName = Match(STRING);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 35;
				relation();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public IToken relationName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsersetRewriteContext usersetRewrite() {
			return GetRuleContext<UsersetRewriteContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 2, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(T__2);
			State = 44;
			Match(T__3);
			State = 45;
			Match(T__0);
			State = 46;
			Match(T__1);
			State = 47;
			_localctx.relationName = Match(STRING);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 48;
				usersetRewrite();
				}
			}

			State = 51;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetRewriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset() {
			return GetRuleContext<UsersetContext>(0);
		}
		public UsersetRewriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetRewrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetRewrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetRewriteContext usersetRewrite() {
		UsersetRewriteContext _localctx = new UsersetRewriteContext(Context, State);
		EnterRule(_localctx, 4, RULE_usersetRewrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(T__5);
			State = 54;
			Match(T__3);
			State = 55;
			userset();
			State = 56;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChildUsersetContext childUserset() {
			return GetRuleContext<ChildUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComputedUsersetContext computedUserset() {
			return GetRuleContext<ComputedUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetOperationUsersetContext setOperationUserset() {
			return GetRuleContext<SetOperationUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThisUsersetContext thisUserset() {
			return GetRuleContext<ThisUsersetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleToUsersetContext tupleToUserset() {
			return GetRuleContext<TupleToUsersetContext>(0);
		}
		public UsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetContext userset() {
		UsersetContext _localctx = new UsersetContext(Context, State);
		EnterRule(_localctx, 6, RULE_userset);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				childUserset();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				computedUserset();
				}
				break;
			case UNION:
			case INTERSECT:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60;
				setOperationUserset();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61;
				thisUserset();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 62;
				tupleToUserset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildUsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset() {
			return GetRuleContext<UsersetContext>(0);
		}
		public ChildUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_childUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChildUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChildUsersetContext childUserset() {
		ChildUsersetContext _localctx = new ChildUsersetContext(Context, State);
		EnterRule(_localctx, 8, RULE_childUserset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__6);
			State = 66;
			Match(T__3);
			State = 67;
			userset();
			State = 68;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputedUsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsersetNamespaceRefContext[] usersetNamespaceRef() {
			return GetRuleContexts<UsersetNamespaceRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetNamespaceRefContext usersetNamespaceRef(int i) {
			return GetRuleContext<UsersetNamespaceRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetObjectRefContext[] usersetObjectRef() {
			return GetRuleContexts<UsersetObjectRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetObjectRefContext usersetObjectRef(int i) {
			return GetRuleContext<UsersetObjectRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetRelationRefContext[] usersetRelationRef() {
			return GetRuleContexts<UsersetRelationRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetRelationRefContext usersetRelationRef(int i) {
			return GetRuleContext<UsersetRelationRefContext>(i);
		}
		public ComputedUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computedUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputedUsersetContext computedUserset() {
		ComputedUsersetContext _localctx = new ComputedUsersetContext(Context, State);
		EnterRule(_localctx, 10, RULE_computedUserset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__7);
			State = 71;
			Match(T__3);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 75;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__8:
					{
					State = 72;
					usersetNamespaceRef();
					}
					break;
				case T__9:
					{
					State = 73;
					usersetObjectRef();
					}
					break;
				case T__2:
					{
					State = 74;
					usersetRelationRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1544L) != 0) );
			State = 79;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetNamespaceRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE_USERSET_NAMESPACE() { return GetToken(UsersetRewriteParser.TUPLE_USERSET_NAMESPACE, 0); }
		public UsersetNamespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetNamespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetNamespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetNamespaceRefContext usersetNamespaceRef() {
		UsersetNamespaceRefContext _localctx = new UsersetNamespaceRefContext(Context, State);
		EnterRule(_localctx, 12, RULE_usersetNamespaceRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__8);
			State = 82;
			Match(T__1);
			State = 83;
			_localctx.@ref = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TUPLE_USERSET_NAMESPACE || _la==STRING) ) {
				_localctx.@ref = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetObjectRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE_USERSET_OBJECT() { return GetToken(UsersetRewriteParser.TUPLE_USERSET_OBJECT, 0); }
		public UsersetObjectRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetObjectRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetObjectRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetObjectRefContext usersetObjectRef() {
		UsersetObjectRefContext _localctx = new UsersetObjectRefContext(Context, State);
		EnterRule(_localctx, 14, RULE_usersetObjectRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__9);
			State = 86;
			Match(T__1);
			State = 87;
			_localctx.@ref = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TUPLE_USERSET_OBJECT || _la==STRING) ) {
				_localctx.@ref = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsersetRelationRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TUPLE_USERSET_RELATION() { return GetToken(UsersetRewriteParser.TUPLE_USERSET_RELATION, 0); }
		public UsersetRelationRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usersetRelationRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsersetRelationRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsersetRelationRefContext usersetRelationRef() {
		UsersetRelationRefContext _localctx = new UsersetRelationRefContext(Context, State);
		EnterRule(_localctx, 16, RULE_usersetRelationRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__2);
			State = 90;
			Match(T__1);
			State = 91;
			_localctx.@ref = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TUPLE_USERSET_RELATION || _la==STRING) ) {
				_localctx.@ref = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisUsersetContext : ParserRuleContext {
		public ThisUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisUsersetContext thisUserset() {
		ThisUsersetContext _localctx = new ThisUsersetContext(Context, State);
		EnterRule(_localctx, 18, RULE_thisUserset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__10);
			State = 94;
			Match(T__3);
			State = 95;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleToUsersetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TuplesetContext tupleset() {
			return GetRuleContext<TuplesetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComputedUsersetContext computedUserset() {
			return GetRuleContext<ComputedUsersetContext>(0);
		}
		public TupleToUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleToUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleToUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleToUsersetContext tupleToUserset() {
		TupleToUsersetContext _localctx = new TupleToUsersetContext(Context, State);
		EnterRule(_localctx, 20, RULE_tupleToUserset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__11);
			State = 98;
			Match(T__3);
			State = 99;
			tupleset();
			State = 100;
			computedUserset();
			State = 101;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuplesetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceRefContext[] namespaceRef() {
			return GetRuleContexts<NamespaceRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceRefContext namespaceRef(int i) {
			return GetRuleContext<NamespaceRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectRefContext[] objectRef() {
			return GetRuleContexts<ObjectRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectRefContext objectRef(int i) {
			return GetRuleContext<ObjectRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRefContext[] relationRef() {
			return GetRuleContexts<RelationRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRefContext relationRef(int i) {
			return GetRuleContext<RelationRefContext>(i);
		}
		public TuplesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuplesetContext tupleset() {
		TuplesetContext _localctx = new TuplesetContext(Context, State);
		EnterRule(_localctx, 22, RULE_tupleset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__12);
			State = 104;
			Match(T__3);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 108;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__8:
					{
					State = 105;
					namespaceRef();
					}
					break;
				case T__9:
					{
					State = 106;
					objectRef();
					}
					break;
				case T__2:
					{
					State = 107;
					relationRef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1544L) != 0) );
			State = 112;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public NamespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceRefContext namespaceRef() {
		NamespaceRefContext _localctx = new NamespaceRefContext(Context, State);
		EnterRule(_localctx, 24, RULE_namespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__8);
			State = 115;
			Match(T__1);
			State = 116;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public ObjectRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectRefContext objectRef() {
		ObjectRefContext _localctx = new ObjectRefContext(Context, State);
		EnterRule(_localctx, 26, RULE_objectRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__9);
			State = 119;
			Match(T__1);
			State = 120;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationRefContext : ParserRuleContext {
		public IToken @ref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UsersetRewriteParser.STRING, 0); }
		public RelationRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationRefContext relationRef() {
		RelationRefContext _localctx = new RelationRefContext(Context, State);
		EnterRule(_localctx, 28, RULE_relationRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__2);
			State = 123;
			Match(T__1);
			State = 124;
			_localctx.@ref = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOperationUsersetContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(UsersetRewriteParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(UsersetRewriteParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(UsersetRewriteParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext[] userset() {
			return GetRuleContexts<UsersetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsersetContext userset(int i) {
			return GetRuleContext<UsersetContext>(i);
		}
		public SetOperationUsersetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOperationUserset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUsersetRewriteVisitor<TResult> typedVisitor = visitor as IUsersetRewriteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOperationUserset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOperationUsersetContext setOperationUserset() {
		SetOperationUsersetContext _localctx = new SetOperationUsersetContext(Context, State);
		EnterRule(_localctx, 30, RULE_setOperationUserset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 114688L) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 127;
			Match(T__3);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 121216L) != 0)) {
				{
				{
				State = 128;
				userset();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,137,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,1,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,50,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,3,3,3,64,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,4,5,76,8,5,11,5,
		12,5,77,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,4,11,
		109,8,11,11,11,12,11,110,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,130,8,15,10,15,12,15,133,
		9,15,1,15,1,15,1,15,0,0,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		0,4,2,0,17,17,20,20,2,0,18,18,20,20,1,0,19,20,1,0,14,16,133,0,32,1,0,0,
		0,2,43,1,0,0,0,4,53,1,0,0,0,6,63,1,0,0,0,8,65,1,0,0,0,10,70,1,0,0,0,12,
		81,1,0,0,0,14,85,1,0,0,0,16,89,1,0,0,0,18,93,1,0,0,0,20,97,1,0,0,0,22,
		103,1,0,0,0,24,114,1,0,0,0,26,118,1,0,0,0,28,122,1,0,0,0,30,126,1,0,0,
		0,32,33,5,1,0,0,33,34,5,2,0,0,34,38,5,20,0,0,35,37,3,2,1,0,36,35,1,0,0,
		0,37,40,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,
		0,41,42,5,0,0,1,42,1,1,0,0,0,43,44,5,3,0,0,44,45,5,4,0,0,45,46,5,1,0,0,
		46,47,5,2,0,0,47,49,5,20,0,0,48,50,3,4,2,0,49,48,1,0,0,0,49,50,1,0,0,0,
		50,51,1,0,0,0,51,52,5,5,0,0,52,3,1,0,0,0,53,54,5,6,0,0,54,55,5,4,0,0,55,
		56,3,6,3,0,56,57,5,5,0,0,57,5,1,0,0,0,58,64,3,8,4,0,59,64,3,10,5,0,60,
		64,3,30,15,0,61,64,3,18,9,0,62,64,3,20,10,0,63,58,1,0,0,0,63,59,1,0,0,
		0,63,60,1,0,0,0,63,61,1,0,0,0,63,62,1,0,0,0,64,7,1,0,0,0,65,66,5,7,0,0,
		66,67,5,4,0,0,67,68,3,6,3,0,68,69,5,5,0,0,69,9,1,0,0,0,70,71,5,8,0,0,71,
		75,5,4,0,0,72,76,3,12,6,0,73,76,3,14,7,0,74,76,3,16,8,0,75,72,1,0,0,0,
		75,73,1,0,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,
		78,79,1,0,0,0,79,80,5,5,0,0,80,11,1,0,0,0,81,82,5,9,0,0,82,83,5,2,0,0,
		83,84,7,0,0,0,84,13,1,0,0,0,85,86,5,10,0,0,86,87,5,2,0,0,87,88,7,1,0,0,
		88,15,1,0,0,0,89,90,5,3,0,0,90,91,5,2,0,0,91,92,7,2,0,0,92,17,1,0,0,0,
		93,94,5,11,0,0,94,95,5,4,0,0,95,96,5,5,0,0,96,19,1,0,0,0,97,98,5,12,0,
		0,98,99,5,4,0,0,99,100,3,22,11,0,100,101,3,10,5,0,101,102,5,5,0,0,102,
		21,1,0,0,0,103,104,5,13,0,0,104,108,5,4,0,0,105,109,3,24,12,0,106,109,
		3,26,13,0,107,109,3,28,14,0,108,105,1,0,0,0,108,106,1,0,0,0,108,107,1,
		0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,
		112,113,5,5,0,0,113,23,1,0,0,0,114,115,5,9,0,0,115,116,5,2,0,0,116,117,
		5,20,0,0,117,25,1,0,0,0,118,119,5,10,0,0,119,120,5,2,0,0,120,121,5,20,
		0,0,121,27,1,0,0,0,122,123,5,3,0,0,123,124,5,2,0,0,124,125,5,20,0,0,125,
		29,1,0,0,0,126,127,7,3,0,0,127,131,5,4,0,0,128,130,3,6,3,0,129,128,1,0,
		0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,
		131,1,0,0,0,134,135,5,5,0,0,135,31,1,0,0,0,8,38,49,63,75,77,108,110,131
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AclExperiments.Parser.Generated
